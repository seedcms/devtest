/*================ Utilities & Helpers ================*/
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@function breakpoint($value, $adjustment: 0) {
  $adjusted-value: em($adjustment);

  // Reduces chances to have a style void
  // between two media queries
  // See https://github.com/sass-mq/sass-mq/issues/6
  @if ($adjustment == -1px) {
    $adjusted-value: -0.01em;
  } @else if ($adjustment == 1px) {
    $adjusted-value: 0.01em;
  }

  $adjusted-value: em($value) + $adjusted-value;

  @return $adjusted-value;
}

/// Returns the value in ems for a given pixel value. Note that this
/// only works for elements that have had no font-size changes.
/// @param {Number} $pxval - The pixel value to be converted.
/// @return {Number} The converted value in ems.

@function em($pxval, $base: 16px) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1em;
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $pxval - The pixel value to be converted.
/// @return {Number} The converted value in rem.

@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  @return ($pxval / 16) * 1rem;
}

@function get-list-value($list, $key) {
  $value: null;

  @each $pair in $list {
    @if $key == nth($pair, 1) {
      $value: nth($pair, 2);
    }
  }

  @return $value;
}

/// Get color with specified opacity
/// @param {Color} $color - Base color.
/// @param {Number} $opacity - The opacity to apply.
/// @return {Color} - The modified color

@function color($color, $opacity: 1) {
  @if $opacity != 1 {
    @return transparentize($color, 1 - $opacity);
  } @else {
    @return $color;
  }
}
