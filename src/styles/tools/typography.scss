@font-face {
  font-family: 'Roboto';
  src: url('Roboto-Medium.woff2') format('woff2'),
    url('Roboto-Medium.woff') format('woff'),
    url('Roboto-Medium.svg#Roboto-Medium') format('svg');
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: 'Roboto';
  src: url('Roboto-Regular.woff2') format('woff2'),
    url('Roboto-Regular.woff') format('woff'),
    url('Roboto-Regular.svg#Roboto-Regular') format('svg');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'Roboto';
  src: url('Roboto-Bold.woff2') format('woff2'),
    url('Roboto-Bold.woff') format('woff'),
    url('Roboto-Bold.svg#Roboto-Bold') format('svg');
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: 'Roboto';
  src: url('Roboto-Light.woff2') format('woff2'),
    url('Roboto-Light.woff') format('woff'),
    url('Roboto-Light.svg#Roboto-Light') format('svg');
  font-weight: 300;
  font-style: normal;
}

/*================ Typography Tools ================*/
@function font-family($type: body) {
  $fetched-value: get-list-value($font-family-data, $type);

  @if type-of($fetched-value) == string {
    @return $fetched-value, sans-serif;
  }
}

@function font-weight($type: normal) {
  $fetched-value: get-list-value($font-weight-data, $type);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  }
}

@function font-size($type: base) {
  $fetched-value: get-list-value($font-size-data, $type);

  @if type-of($fetched-value) != null {
    @return $fetched-value;
  }
}

@function line-height($type: normal) {
  $fetched-value: get-list-value(line-height, $type);

  @if type-of($fetched-value) != null {
    @return $fetched-value;
  }
}

@mixin font-size-and-height($type: base) {
  $size-value: get-list-value($font-size-data, $type);

  @if type-of($size-value) != null {
    font-size: $size-value;
  }

  $line-height-value: get-list-value($line-height-data, $type);

  @if type-of($line-height-value) != null {
    line-height: $line-height-value;
  }
}
